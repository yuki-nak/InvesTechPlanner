@page "/demand-list"
@rendermode InteractiveServer
@inject InvesTechPlanner.UseCases.Interfaces.IDemandService DemandService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using InvesTechPlanner.UseCases.DTOs


<div class="container mt-5">
    <h2 class="text-center mb-4">Demand List</h2>

    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="close" @onclick="CloseDeleteConfirmationModal">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete Demand '@deleteCandidate.Title'?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteDemand(deleteCandidate.DemandId)">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Filter and CSV download button -->
    <div class="col-md-2 d-flex align-items-end">
        <button class="btn btn-primary me-2" @onclick="ApplyFilters" style="white-space: nowrap;">Apply Filters</button>
        <button class="btn btn-secondary" @onclick="ExportCsv" style="white-space: nowrap;">Export to CSV</button>
    </div>

    <!-- Filter Section -->
    <div class="row mb-4">
        <div class="col-md-2">
            <label for="FiscalYearFilter" class="form-label">Year</label>
            <InputSelect id="FiscalYearFilter" @bind-Value="selectedFiscalYear" class="form-control" @onchange="ApplyFilters">
                <option value="">All</option>
                @foreach (var year in fiscalYears)
                {
                    <option value="@year">@year</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label for="CategoryFilter" class="form-label">Category</label>
            <InputSelect id="CategoryFilter" @bind-Value="selectedCategory" class="form-control" @onchange="ApplyFilters">
                <option value="">All</option>
                @foreach (var category in demandCategories)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label for="DeptFilter" class="form-label">Dept</label>
            <InputSelect id="DeptFilter" @bind-Value="selectedDept" class="form-control" @onchange="ApplyFilters">
                <option value="">All</option>
                @foreach (var dept in requestedDepts)
                {
                    <option value="@dept">@dept</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label for="StatusFilter" class="form-label">Status</label>
            <InputSelect id="StatusFilter" @bind-Value="selectedStatus" class="form-control" @onchange="ApplyFilters">
                <option value="">All</option>
                @foreach (var status in statuses)
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label for="ScaleFilter" class="form-label">Scale</label>
            <InputSelect id="ScaleFilter" @bind-Value="selectedScale" class="form-control" @onchange="ApplyFilters">
                <option value="">All</option>
                @foreach (var scale in investmentScales)
                {
                    <option value="@scale">@scale</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label for="PriorityFilter" class="form-label">Priority</label>
            <InputSelect id="PriorityFilter" @bind-Value="selectedPriority" class="form-control" @onchange="ApplyFilters">
                <option value="">All</option>
                @foreach (var priority in demandPriorities)
                {
                    <option value="@priority">@priority</option>
                }
            </InputSelect>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Year</th>
                <th>Title</th>
                <th>Category</th>
                <th>Dept</th>
                <th>Status</th>
                <th>Scale</th>
                <th>Priority</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredDemands == null || !filteredDemands.Any())
            {
                <tr>
                    <td colspan="8" class="text-center">No demands found.</td>
                </tr>
            }
            else
            {
                @foreach (var demand in filteredDemands)
                {
                    <tr>
                        <td>@demand.DemandId</td>
                        <td>@demand.FiscalYear</td>
                        <td>
                            <a href="@($"demand-overview/{demand.DemandId}")">
                                @demand.Title
                            </a>
                        </td>
                        <td>@demand.DemandCategory</td>
                        <td>@demand.RequestedDept</td>
                        <td>@demand.Status</td>
                        <td>@demand.InvestmentScale</td>
                        <td>@demand.DemandPriority</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(demand)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    private List<DemandDto> demands = new();
    private List<DemandDto> filteredDemands = new();

    private List<string> fiscalYears = new();
    private List<string> demandCategories = new();
    private List<string> requestedDepts = new();
    private List<string> statuses = new();
    private List<string> investmentScales = new();
    private List<string> demandPriorities = new();

    private string selectedFiscalYear = "";
    private string selectedCategory = "";
    private string selectedDept = "";
    private string selectedStatus = "";
    private string selectedScale = "";
    private string selectedPriority = "";

    private bool showDeleteConfirmation = false;
    private DemandDto deleteCandidate = new DemandDto();

    protected override async Task OnInitializedAsync()
    {
        // Retrieve demands and options for filters
        demands = (await DemandService.GetDemandListItems()).ToList();
        filteredDemands = demands;

        var options = await DemandService.GetOptionsForFilters();
        fiscalYears = options.FiscalYears;
        demandCategories = options.DemandCategories;
        requestedDepts = options.RequestedDepts;
        statuses = options.Statuses;
        investmentScales = options.InvestmentScales;
        demandPriorities = options.DemandPriorities;
    }

    private async Task ExportCsv()
    {
        try
        {
            var memoryStream = await DemandService.ExportDemandsToCsv();
            var fileName = "demands.csv";
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CSVエクスポートエラー: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        filteredDemands = demands.Where(d =>
            (string.IsNullOrEmpty(selectedFiscalYear) || (selectedFiscalYear == "Unknown" && d.FiscalYear == null) || d.FiscalYear?.ToString() == selectedFiscalYear) &&
            (string.IsNullOrEmpty(selectedCategory) || (selectedCategory == "Unknown" && d.DemandCategory == null) || d.DemandCategory == selectedCategory) &&
            (string.IsNullOrEmpty(selectedDept) || (selectedDept == "Unknown" && d.RequestedDept == null) || d.RequestedDept == selectedDept) &&
            (string.IsNullOrEmpty(selectedStatus) || (selectedStatus == "Unknown" && d.Status == null) || d.Status == selectedStatus) &&
            (string.IsNullOrEmpty(selectedScale) || (selectedScale == "Unknown" && d.InvestmentScale == null) || d.InvestmentScale == selectedScale) &&
            (string.IsNullOrEmpty(selectedPriority) || (selectedPriority == "Unknown" && d.DemandPriority == null) || d.DemandPriority == selectedPriority)
        ).ToList();
    }

    private void ConfirmDelete(DemandDto demand)
    {
        deleteCandidate = demand;
        showDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        showDeleteConfirmation = false;
    }

    private async Task DeleteDemand(int demandId)
    {
        await DemandService.DeleteDemand(demandId);
        demands = (await DemandService.GetDemandListItems()).ToList();
        ApplyFilters();
        showDeleteConfirmation = false;
        StateHasChanged();
    }
}
