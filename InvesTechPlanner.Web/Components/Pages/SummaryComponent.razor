@inject InvesTechPlanner.UseCases.Interfaces.IDemandDetailsService DemandDetailsService
@using InvesTechPlanner.UseCases.DTOs

@if (summaryData == null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var scenarioType in summaryData.Keys)
    {
        <div style="padding: 20px;">
            <h2 style="color: blue;">@scenarioType</h2>
        </div>
        if (scenarioType == "Current")
        {
            @foreach (var costType in summaryData[scenarioType].Keys)
            {
                var currentSummary = new SummaryDto
                            {
                                Year0 = summaryData[scenarioType][costType].Values.Sum(x => x.Year0),
                                Year1 = summaryData[scenarioType][costType].Values.Sum(x => x.Year1),
                                Year2 = summaryData[scenarioType][costType].Values.Sum(x => x.Year2),
                                Year3 = summaryData[scenarioType][costType].Values.Sum(x => x.Year3),
                                Year4 = summaryData[scenarioType][costType].Values.Sum(x => x.Year4),
                                Year5 = summaryData[scenarioType][costType].Values.Sum(x => x.Year5)
                            };

                <h4>@costType</h4>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Expense Type</th>
                            <th>Year 0</th>
                            <th>Year 1</th>
                            <th>Year 2</th>
                            <th>Year 3</th>
                            <th>Year 4</th>
                            <th>Year 5</th>
                            <th>Current Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expenseType in summaryData[scenarioType][costType].Keys)
                        {
                            var data = summaryData[scenarioType][costType][expenseType];
                            var currentTotal = data.Year0 + data.Year1 + data.Year2 + data.Year3 + data.Year4 + data.Year5;

                            <tr>
                                <td>@expenseType</td>
                                <td>@data.Year0.ToString("N0")</td>
                                <td>@data.Year1.ToString("N0")</td>
                                <td>@data.Year2.ToString("N0")</td>
                                <td>@data.Year3.ToString("N0")</td>
                                <td>@data.Year4.ToString("N0")</td>
                                <td>@data.Year5.ToString("N0")</td>
                                <td>@currentTotal.ToString("N0")</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Sub Total</th>
                            <th>@(currentSummary.Year0.ToString("N0") ?? "0")</th>
                            <th>@(currentSummary.Year1.ToString("N0") ?? "0")</th>
                            <th>@(currentSummary.Year2.ToString("N0") ?? "0")</th>
                            <th>@(currentSummary.Year3.ToString("N0") ?? "0")</th>
                            <th>@(currentSummary.Year4.ToString("N0") ?? "0")</th>
                            <th>@(currentSummary.Year5.ToString("N0") ?? "0")</th>
                            <th>@((currentSummary.Year0 + currentSummary.Year1 + currentSummary.Year2 + currentSummary.Year3 + currentSummary.Year4 + currentSummary.Year5).ToString("N0") ?? "0")</th>

                        </tr>
                    </tfoot>
                </table>
            }
        }

        if (scenarioType == "Invested")
        {
            foreach (var costType in summaryData[scenarioType].Keys)
            {
                var investedSummary = new SummaryDto
                            {
                                Year0 = summaryData[scenarioType][costType].Values.Sum(x => x.Year0),
                                Year1 = summaryData[scenarioType][costType].Values.Sum(x => x.Year1),
                                Year2 = summaryData[scenarioType][costType].Values.Sum(x => x.Year2),
                                Year3 = summaryData[scenarioType][costType].Values.Sum(x => x.Year3),
                                Year4 = summaryData[scenarioType][costType].Values.Sum(x => x.Year4),
                                Year5 = summaryData[scenarioType][costType].Values.Sum(x => x.Year5)
                            };

                var totalInvest = investedSummary.Year0 + investedSummary.Year1 + investedSummary.Year2 + investedSummary.Year3 + investedSummary.Year4 + investedSummary.Year5;
                var totalCurrent = summaryData.ContainsKey("Current") && summaryData["Current"].ContainsKey(costType)
                    ? summaryData["Current"][costType].Values.Sum(x => x.Year0 + x.Year1 + x.Year2 + x.Year3 + x.Year4 + x.Year5)
                    : 0;
                var totalDelta = totalCurrent - totalInvest;

                var roi = totalInvest != 0 ? (totalDelta / totalInvest) * 100 : 0;
                var paybackPeriod = DemandDetailsService.CalculatePaybackPeriod(investedSummary, new SummaryDto
                            {
                                Year0 = totalCurrent / 6,
                                Year1 = totalCurrent / 6,
                                Year2 = totalCurrent / 6,
                                Year3 = totalCurrent / 6,
                                Year4 = totalCurrent / 6,
                                Year5 = totalCurrent / 6
                            });

                <h4>@costType</h4>
                <p style="color: red;">ROI: @roi.ToString("F2")%</p>
                <p style="color: red;">Payback Period: @(paybackPeriod.HasValue ? $"{paybackPeriod.Value:F1} years" : "Not Recoverable")</p>

                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Expense Type</th>
                            <th>Year 0</th>
                            <th>Year 1</th>
                            <th>Year 2</th>
                            <th>Year 3</th>
                            <th>Year 4</th>
                            <th>Year 5</th>
                            <th>Invest Total</th>
                            <th>Delta</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expenseType in summaryData[scenarioType][costType].Keys)
                        {
                            var data = summaryData[scenarioType][costType][expenseType];
                            var investTotal = data.Year0 + data.Year1 + data.Year2 + data.Year3 + data.Year4 + data.Year5;
                            var delta = totalCurrent - investTotal;

                            <tr>
                                <td>@expenseType</td>
                                <td>@data.Year0.ToString("N0")</td>
                                <td>@data.Year1.ToString("N0")</td>
                                <td>@data.Year2.ToString("N0")</td>
                                <td>@data.Year3.ToString("N0")</td>
                                <td>@data.Year4.ToString("N0")</td>
                                <td>@data.Year5.ToString("N0")</td>
                                <td>@investTotal.ToString("N0")</td>
                                <td>@delta.ToString("N0")</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th>Sub Total</th>
                            <th>@investedSummary.Year0.ToString("N0")</th>
                            <th>@investedSummary.Year1.ToString("N0")</th>
                            <th>@investedSummary.Year2.ToString("N0")</th>
                            <th>@investedSummary.Year3.ToString("N0")</th>
                            <th>@investedSummary.Year4.ToString("N0")</th>
                            <th>@investedSummary.Year5.ToString("N0")</th>
                            <th>@totalInvest.ToString("N0")</th>
                            <th>@totalDelta.ToString("N0")</th>
                        </tr>
                    </tfoot>
                </table>
            }
        }
    }
}

@code {
    [Parameter]
    public int DemandId { get; set; }

    private Dictionary<string, Dictionary<string, Dictionary<string, SummaryDto>>> summaryData = new();

    protected override async Task OnInitializedAsync()
    {
        summaryData = await DemandDetailsService.GetSummaryByScenarioAndCostType(DemandId);
    }
}
